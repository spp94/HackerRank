import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the alternate function below.
    static int alternate(String s) 
    {
        if(s.length() <= 1)
        {
            return 0;
        }
        else if(s.length() == 2)
        {
            return 2;
        }
        else if(s.length() == 3)
        {
            if(s.charAt(0) == s.charAt(2))
            {
                return 3;
            }
            else
            {
                return 0;
            }
        }
        else
        {
        HashSet<Character> set = new HashSet<Character>();
        for(int i = 0; i < s.length(); i++)
        {
            set.add(s.charAt(i));
        }
        char[] arr = new char[set.size()];
        int index = 0;
        for(Character ch : set)
        {
            arr[index++] = ch;
        }
        int max_count = 0;
        for(int i = 0; i < index; i++)
        {
            char ch1 = arr[i];
            for(int j = i+1; j < index; j++)
            {
                char ch2 = arr[j];
                String temp = s;
                temp = temp.replace(ch1+"","");
                temp = temp.replace(ch2+"","");
                boolean flag = true;
                HashSet<Character> mySet = new HashSet<Character>();
                for(int k = 0; k < temp.length(); k++)
                {
                    mySet.add(temp.charAt(k));
                }
                for(int k = 0; k < temp.length()-3; k=k+2)
                {
                    //mySet.add(temp.charAt(k));
                    if(temp.charAt(k) == temp.charAt(k+2) && temp.charAt(k+1) ==                                temp.charAt(k+3))
                    {
                        continue;
                    }
                    else
                    {
                        flag = false;
                        break;
                    }
                }
                if(flag && mySet.size() == 2)
                {
                    max_count = max_count < temp.length() ? temp.length() : max_count;
                }
                for(Character c : mySet)
                {
                    System.out.print(c+" ");
                }
                System.out.println();
                mySet.clear();
                System.out.println(flag+" "+temp+" "+max_count);
            }
        }
        return max_count;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int l = Integer.parseInt(bufferedReader.readLine().trim());

        String s = bufferedReader.readLine();

        int result = alternate(s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
