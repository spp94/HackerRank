import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the balancedSums function below.
    static String balancedSums(List<Integer> arr) 
    {
        arr.add(0);
        int[] front = new int[arr.size()];
        int[] back = new int[arr.size()];
        front[0] = arr.get(0); back[arr.size()-1] = arr.get(arr.size()-1);
        for(int i = 1; i < arr.size(); i++)
        {
            front[i] = front[i-1] + arr.get(i);
            //back[arr.size()-i-1] = back[arr.size()-i] + arr.get(i);
        }
        for(int i = arr.size()-2; i >= 0; i--)
        {
             //front[i] = front[i-1] + arr.get(i);
              back[i] = back[i+1] + arr.get(i);
        }
        boolean flag = false;
        for(int i = 0; i < arr.size(); i++)
        {
            if(front[i] == back[i])
            {
                flag = true;
                break;
            }
        }
        return flag ? "YES" : "NO";
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int T = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, T).forEach(TItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                String result = balancedSums(arr);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
