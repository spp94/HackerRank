import java.io.*; 
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'mostActive' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts STRING_ARRAY customers as parameter.
     */

    public static List<String> mostActive(List<String> customers) {
        HashMap<String, Integer> map = new HashMap<>();
        for(String trader : customers){
            int count = map.containsKey(trader) ? map.get(trader)+1 : 1;
            map.put(trader, count);
        }
        double minNoOfTraders = (customers.size()*.05);
 
        List<Map.Entry<String, Integer> > list = 
               new LinkedList<Map.Entry<String, Integer> >(map.entrySet()); 
   
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() { 
            public int compare(Map.Entry<String, Integer> o1,  
                               Map.Entry<String, Integer> o2) 
            { 
                    return (o1.getKey().compareTo(o2.getKey()));
            } 
        }); 
            
        List<String> temp = new ArrayList<>(); 
        for (Map.Entry<String, Integer> aa : list) { 
            if(aa.getValue() >= minNoOfTraders){
            temp.add(aa.getKey());
            }
        } 
        return temp; 
    }

}
public class Solution {
