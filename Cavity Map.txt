import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the cavityMap function below.
    static String[] cavityMap(String[] grid) 
    {
        int l = grid.length;
        String[] result = new String[l];
        String t1 = "";
        for(int i = 0; i < l; i++)
        {
            t1 += grid[0].charAt(i);
        }
        result[0] = t1;
        for(int i = 1; i < l-1; i++)
        {
            String temp = grid[i].charAt(0)+"";
            for(int j = 1; j < l-1; j++)
            {
                if(grid[i].charAt(j) > grid[i].charAt(j-1) 
                   && grid[i].charAt(j) > grid[i].charAt(j+1)
                   && grid[i].charAt(j) > grid[i+1].charAt(j)
                   && grid[i].charAt(j) > grid[i-1].charAt(j))
                   {
                       temp += 'X'; 
                   }
                else
                {
                    temp += grid[i].charAt(j);
                }
            }
            temp += grid[i].charAt(l-1);
            result[i] = temp;
        }
        String t2 = "";
        for(int i = 0; i < l; i++)
        {
            t2 += grid[l-1].charAt(i);
        }
        result[l-1] = t2;
        return result;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String[] grid = new String[n];

        for (int i = 0; i < n; i++) {
            String gridItem = scanner.nextLine();
            grid[i] = gridItem;
        }

        String[] result = cavityMap(grid);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(result[i]);

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
