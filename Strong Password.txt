import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static boolean countNumbers(String password)
    {
        int count = 0;
        for(int i = 0; i < password.length(); i++)
        {
            char ch = password.charAt(i);
            if(ch >= '0' && ch <= '9')
            {
                count++;
                break;
            }
        }
        return count == 1;
    }

    static boolean countLowerCaseCharacters(String password)
    {
        int count = 0;
        for(int i = 0; i < password.length(); i++)
        {
            char ch = password.charAt(i);
            if(ch >= 'a' && ch <= 'z')
            {
                count++;
                break;
            }
        }
        return count == 1;
    }

    static boolean countUpperCaseCharacters(String password)
    {
        int count = 0;
        for(int i = 0; i < password.length(); i++)
        {
            char ch = password.charAt(i);
            if(ch >= 'A' && ch <= 'Z')
            {
                count++;
                break;
            }
        }
        return count == 1;
    }

    static boolean countSpecialCharacters(String password)
    {
        String temp = "!@#$%^&*()-+";
        for(int i = 0; i < temp.length(); i++)
        {
            if(password.contains(temp.charAt(i)+""))
            {
                return true;
            }
        }
        return false;
    }
    // Complete the minimumNumber function below.
    static int minimumNumber(int n, String password) 
    {
        if(countNumbers(password) && countLowerCaseCharacters(password) && countUpperCaseCharacters(password) && countSpecialCharacters(password))
        {
            return n >= 6 ? 0 : 6-n;
        }
        else
        {
            int total = (countNumbers(password) ? 0:1) + (countLowerCaseCharacters(password) ? 0:1) + (countUpperCaseCharacters(password) ? 0:1) + (countSpecialCharacters(password) ? 0:1);
            return n >= 6 ? total : (total + n >= 6) ? total : 6 - n;
        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String password = scanner.nextLine();

        int answer = minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
